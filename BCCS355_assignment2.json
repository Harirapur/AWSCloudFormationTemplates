{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Template to lauch load balanced auto scaling group of EC2 and RDS instances with wordpress installed for Teamtasker Motorsport",
    "Parameters": {
        "EC2InstanceType": {
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": ["t2.micro", "m1.small"],
            "Description": "Instance type to use for the wordpress PHP servers."
        },
        "RDSInstanceType": {
            "Type": "String",
            "Default": "db.t2.micro",
            "AllowedValues": ["db.t2.micro", "db.m1.small"],
            "Description": "Instance type to use for the SQL servers."
        },
        "DatabaseName": {
            "Type": "String",
            "Default": "wordpressDB",
            "Description": "The name to use for the database"
        },
        "DBUsername": {
            "Type": "String",
            "Default": "admin",
            "Description": "The username to use for the database"
        },
        "DBPassword": {
            "Type": "String",
            "Default": "admin",
            "Description": "The password to use for the database"
        },
        "KeyName": {
            "Type": "String",
            "Default": "bccs355_1",
            "Description": "Enter the name of an existing key pair to use during the creation of resources"
        },
        "TargetVPCCIDR": {
            "Type": "String",
            "Default": "10.0.0.0/16",
            "Description": "Enter the CIDR block the new VPC should use\nE.g.: 10.0.0.0/16"
        },
        "TargetVPCSubnet1CIDR": {
            "Type": "String",
            "Default": "10.0.0.0/24",
            "Description": "Enter the CIDR block the new VPC should use\nE.g.: 10.0.0.0/24"
        },
        "TargetVPCSubnet2CIDR": {
            "Type": "String",
            "Default": "10.0.1.0/24",
            "Description": "Enter the CIDR block the new VPC should use\nE.g.: 10.0.0.0/24"
        },
        "TargetVPCSubnet3CIDR": {
            "Type": "String",
            "Default": "10.0.2.0/24",
            "Description": "Enter the CIDR block the new VPC should use\nE.g.: 10.0.0.0/24"
        },
    },
    "Resources": {
        "AutoScalingInstancesSecurictyGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SSH and HTTP allowed from everywhere",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "822",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ProjectVPC": {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : {"Ref": "TargetVPCCIDR"},
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "InstanceTenancy" : "default",
                "Tags" : []
            }
        },
        "VPCSubnet1": {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" } ] },
                "CidrBlock" : {"Ref": "TargetVPCSubnet1CIDR"},
                "MapPublicIpOnLaunch" : "true",
                "VpcId" : {"Ref": "ProjectVPC"}
            }
        },
        "VPCSubnet2": {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" } ] },
                "CidrBlock" : {"Ref": "TargetVPCSubnet2CIDR"},
                "MapPublicIpOnLaunch" : "true",
                "VpcId" : {"Ref": "ProjectVPC"}
            }
        },
        "VPCSubnet3": {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" } ] },
                "CidrBlock" : {"Ref": "TargetVPCSubnet3CIDR"},
                "MapPublicIpOnLaunch" : "true",
                "VpcId" : {"Ref": "ProjectVPC"}
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
            }
        },
        "GatewayAttachment" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "ProjectVPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "ProjectRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "DependsOn" : "InternetGateway",
            "Properties" : {
                "VpcId" : { "Ref" : "ProjectVPC" }
            }
        },
        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "InternetGateway",
            "Properties" : {
                "RouteTableId" : { "Ref" : "ProjectRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "VPCSubnet1RouteTableEntry" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "VPCSubnet1" },
                "RouteTableId" : { "Ref" : "ProjectRouteTable" }
            }
        },
        "VPCSubnet2RouteTableEntry" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "VPCSubnet2" },
                "RouteTableId" : { "Ref" : "ProjectRouteTable" }
            }
        },
        "VPCSubnet3RouteTableEntry" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "VPCSubnet3" },
                "RouteTableId" : { "Ref" : "ProjectRouteTable" }
            }
        },
        "LoadBalancer": {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "Subnets": [{"Ref": "VPCSubnet1"}, {"Ref": "VPCSubnet2"}, {"Ref": "VPCSubnet3"}]
            }
        },
        "LoadBalancerListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "DefaultActions" : [{
                    "Type" : "forward",
                    "TargetGroupArn" : { "Ref" : "LoadBalancerTargetGroup" }
                }],
                "LoadBalancerArn" : { "Ref" : "LoadBalancer" },
                "Port" : "80",
                "Protocol" : "HTTP"
            }
        },
        "LoadBalancerTargetGroup" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "HealthCheckPath" : "/",  
                "HealthCheckIntervalSeconds" : 15,
                "HealthCheckTimeoutSeconds" : 5,
                "HealthyThresholdCount" : 2,
                "Port" : 80,
                "Protocol" : "HTTP",
                "UnhealthyThresholdCount" : 5,
                "VpcId" : {"Ref" : "ProjectVPC"}
            }
        },
        "EC2AutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier": [{"Ref": "VPCSubnet1"}, {"Ref": "VPCSubnet2"}, {"Ref": "VPCSubnet3"}],
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : "2",
                "MaxSize" : "4",
                "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime" : "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
    }
}